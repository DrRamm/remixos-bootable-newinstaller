#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# Last updated 2014/04/09
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

write_speed_test()
{
    MIN_SPEED=10

    if [ -z "$SKIP_WRITE_SPEED_TEST" ]; then
        echo "Writing Speed Test ..."
        SPEEDRESULT=`dd if=/dev/zero bs=1M count=100 of=/mnt/$SRC/speedtest conv=fsync 2>&1`
        rm /mnt/$SRC/speedtest
        SPEED=`echo $SPEEDRESULT | sed -n "s/^.*, \([0-9.]\+\)MB\/s/\1/p"`
        if [ -n "$SPEED" ]; then
            echo "Writing Speed: $SPEED MB/s"
            if [ $(awk "BEGIN{ print (0$SPEED<$MIN_SPEED)?1:0 }") = 1 ] ; then
                echo "with writing speed lower than ${MIN_SPEED} MB/s detected. System may fail to boot up. To continue, press Enter."
                read
            fi
        else
            echo "Cannot detect the writing speed. System may fail to boot up. To continue, press Enter."
            read
        fi
    fi

}

create_and_format_data_img()
{
    INITIALIZE=false
    data_image=/mnt/$SRC/data.img
    unformatted_data_image=/mnt/$SRC/unformatted_data.img

    if [ ! -f $data_image ]; then
        write_speed_test
        if [ -f $unformatted_data_image ]; then
            mv $unformatted_data_image $data_image
        else
            AVAIL=`df -m /mnt|grep /mnt|awk '{print $4}'`
            if [ $AVAIL -le 500 ]; then
                echo "Not enough space to create Data Partition. Unable to use Persistent Mode, to continue, press Enter."
                read
                return
            fi
            FILESYSTEMTYPE=`mount|grep /mnt|awk '{print $5}'`
            if [ "$FILESYSTEMTYPE" = "fuseblk" ]; then
                if [ $AVAIL -ge 16384 ]; then
                    let SIZE=8192
                else
                    let SIZE=$AVAIL/2
                fi
            else
                if [ $AVAIL -ge 8190 ]; then
                    let SIZE=4095
                else
                    let SIZE=$AVAIL/2
                fi
            fi
            echo "Initialize ${SIZE}MB Data Partition, please be patient ..."
            if [ -x system/bin/sh ]; then
                system/bin/sh -c "dd if=/dev/zero bs=1M count=$SIZE | pv -s ${SIZE}m | dd of=${data_image} bs=1M" 2>&1
            else
                dd if=/dev/zero bs=1M count=$SIZE | pv -s ${SIZE}m | dd of=$data_image bs=1M
            fi
        fi
        echo "Formatting data partition, please wait for a moment ..."
        mke2fs -F -t ext4 $data_image &>/tmp/format.log
        cat /tmp/format.log
        INITIALIZE=true
    fi

    mount -o loop,noatime,nodiratime $data_image data
    if [ "$INITIALIZE" = "true" ]; then
        touch data/initialize_flag
    fi
}

check_data_partition()
{
	if [ -n "$DEBUG" ]; then
		echo "Checking Data Partition ..."
		e2fsck -t -p $1
		e2fsck -t -y $1
	else
		e2fsck -t -p $1 > /dev/null
		e2fsck -t -y $1 > /dev/null
	fi
}

mount_data()
{
    mountpoint -q data && return
    if [ -n "$OPTIHDD" ]; then
        MOUNT_OPTION=noatime,nodiratime,data=writeback,commit=20,barrier=0
    else
        MOUNT_OPTION=noatime,nodiratime
    fi
    [ -n "$DATA" ] && blk=`basename $DATA` || blk=
    if [ -n "$CREATE_DATA_IMG" ]; then
        remount_rw
        create_and_format_data_img
    elif [ -n "$USB_DATA_PARTITION" ]; then
        device=$(blkid | grep 'REMIXOSDATA')
        if [ -z "$device"  ]; then
            device=$(blkid | grep 'REMIXOSSYS' | awk '{print $1}' | sed -n 's/2:/3/;1p')
            echo "Format Data Partition ..."
            mke2fs -F -t ext4 -L "REMIXOSDATA" $device
        else
            device=$(blkid | grep 'REMIXOSDATA' | awk '{print $1}' | sed -n 's/://;1p')
        fi
        blk=`basename $device`
        if [ -b "/dev/$blk" ]; then
            [ ! -e /dev/block/$blk ] && ln /dev/$blk /dev/block
            check_data_partition /dev/block/$blk
            mount -t ext4 -o $MOUNT_OPTION /dev/block/$blk data
        fi
    elif [ -n "$DATA_IN_MEM" ]; then
        mount -t tmpfs tmpfs data
    elif [ -b "/dev/$blk" ]; then
        [ ! -e /dev/block/$blk ] && ln /dev/$blk /dev/block
        check_data_partition /dev/block/$blk
        mount -o $MOUNT_OPTION /dev/block/$blk data
    elif [ -d /mnt/$SRC/data ]; then
        remount_rw
        mount --bind /mnt/$SRC/data data
    elif [ -f /mnt/$SRC/data.img ]; then
        remount_rw
        check_data_partition /mnt/$SRC/data.img
        mount -o loop,$MOUNT_OPTION /mnt/$SRC/data.img data
    else
        device_mount_data || mount -t tmpfs tmpfs data
    fi
}

mount_sdcard()
{
    if [ -d /mnt/$SRC/sdcard ]; then
        remount_rw
        mkdir mnt/sdcard2
        mount --bind /mnt/$SRC/sdcard mnt/sdcard2
    fi
    mountpoint -q sdcard && return
    if [ -n "$SDCARD" -a -e /mnt/$SRC$SDCARD ]; then
        if [ ! -e /android$SDCARD ]; then
            remount_rw
            sddir=`dirname $SDCARD`
            mkdir /android$sddir
            mount --bind /mnt/$SRC$sddir /android$sddir
        fi
    elif [ "$SDCARD" = "premount" ]; then
    # WARNING: premount the sdcard is deprecated since froyo-x86.
    # It is left only for backward compatibility and may be removed
    # in the future.
        if [ -d /mnt/$SRC/sdcard ]; then
            remount_rw
            mount --bind /mnt/$SRC/sdcard mnt/sdcard
        elif [ -d data/sdcard ]; then
            mount --bind data/sdcard mnt/sdcard
        else
            mount -o mode=2777,uid=1000,gid=1015 -t tmpfs tmpfs mnt/sdcard
        fi
    fi
}
